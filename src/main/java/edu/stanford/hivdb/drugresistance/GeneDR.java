/*

    Copyright (C) 2017 Stanford HIVDB team

    Sierra is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Sierra is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package edu.stanford.hivdb.drugresistance;

import java.util.Collections;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import edu.stanford.hivdb.comments.BoundComment;
import edu.stanford.hivdb.comments.CommentType;
import edu.stanford.hivdb.drugs.Drug;
import edu.stanford.hivdb.drugs.DrugClass;
import edu.stanford.hivdb.mutations.MutationSet;
import edu.stanford.hivdb.mutations.MutationType;
import edu.stanford.hivdb.viruses.Gene;
import edu.stanford.hivdb.viruses.Virus;
import edu.stanford.hivdb.mutations.Mutation;

public abstract class GeneDR<VirusT extends Virus<VirusT>> {

	// Required data structures used to instantiate the class
	protected final Gene<VirusT> gene;
	protected final MutationSet<VirusT> mutations;

	// Optional data structures used to instantiate the class
	protected Map<MutationType<VirusT>, MutationSet<VirusT>> mutTypes;
	protected Map<CommentType, List<BoundComment<VirusT>>> commentsByTypes;

	protected Map<DrugClass<VirusT>, Map<Drug<VirusT>, Map<Mutation<VirusT>, Double>>> drugClassDrugMutScores;
	protected Map<DrugClass<VirusT>, Map<Drug<VirusT>, Map<MutationSet<VirusT>, Double>>> drugClassDrugComboMutScores;

	// Data structures generated by methods to provide improved access to the data
	protected Map<DrugClass<VirusT>, Map<Mutation<VirusT>, Map<Drug<VirusT>, Double>>> drugClassMutDrugScores = new TreeMap<>();
	protected Map<DrugClass<VirusT>, Map<MutationSet<VirusT>, Map<Drug<VirusT>, Double>>> drugClassComboMutDrugScores = new TreeMap<>();
	protected Map<DrugClass<VirusT>, Map<Mutation<VirusT>, Map<Drug<VirusT>, Double>>> drugClassMutAllDrugScores = new TreeMap<>();
	private Map<DrugClass<VirusT>, Map<MutationSet<VirusT>, Map<Drug<VirusT>, Double>>> drugClassComboMutAllDrugScores = new TreeMap<>();

	protected GeneDR(Gene<VirusT> gene, MutationSet<VirusT> mutations) {
		this.gene = gene;
		this.mutations = mutations;
	}

	protected void postConstructor() {
		populateDrugClassMutDrugScores();
		populateDrugClassDrugComboMutDrugScores();
		populateDrugClassMutAllDrugScores();
		populateDrugClassComboMutAllDrugScores();
	}

	public Gene<VirusT> getGene() { return gene; }

	public abstract Map<Drug<VirusT>, Double> getDrugClassTotalDrugScores(DrugClass<VirusT> drugClass);
	public abstract Double getTotalDrugScore(Drug<VirusT> drug);
	public abstract Integer getDrugLevel(Drug<VirusT> drug);
	public abstract String getDrugLevelText(Drug<VirusT> drug);
	public abstract String getDrugLevelSIR(Drug<VirusT> drug);

	public MutationSet<VirusT> getMutations() { return mutations; }

	public Map<MutationType<VirusT>, MutationSet<VirusT>> groupMutationsByTypes() {
		if (mutTypes == null) {
			mutTypes = mutations.groupByMutType(gene);
		}
		return mutTypes;
	}

	public MutationSet<VirusT> getMutationsByType(MutationType<VirusT> mutType) {
		return groupMutationsByTypes().getOrDefault(mutType, new MutationSet<>());
	}
	
	public abstract List<BoundComment<VirusT>> getAllComments();

	public Map<CommentType, List<BoundComment<VirusT>>> groupCommentsByTypes() {
		if (commentsByTypes == null) {
			commentsByTypes = getAllComments()
				.stream()
				.collect(Collectors.groupingBy(
					cmt -> cmt.getType(),
					TreeMap::new,
					Collectors.toList()
				));
		}
		return commentsByTypes;
	}

	public List<BoundComment<VirusT>> getCommentsByType(CommentType commentType) {
		return groupCommentsByTypes().getOrDefault(commentType, Collections.emptyList());
	}

	public Map<Mutation<VirusT>, Map<Drug<VirusT>, Double>> getIndividualMutAllDrugScoresForDrugClass(DrugClass<VirusT> drugClass) {
		return drugClassMutAllDrugScores.get(drugClass);
	}

	public Map<MutationSet<VirusT>, Map<Drug<VirusT>, Double>> getComboMutAllDrugScoresForDrugClass(DrugClass<VirusT> drugClass) {
		return drugClassComboMutAllDrugScores.get(drugClass);
	}


	public boolean drugClassHasScoredMuts (DrugClass<VirusT> drugClass) {
		return drugClassHasScoredIndividualMuts(drugClass) || drugClassHasScoredComboMuts(drugClass);
	}

	public boolean drugClassHasScoredIndividualMuts (DrugClass<VirusT> drugClass) {
		return drugClassMutDrugScores.containsKey(drugClass);
	}

	public boolean drugClassHasScoredComboMuts (DrugClass<VirusT> drugClass) {
		return drugClassComboMutDrugScores.containsKey(drugClass);
	}

	public Map<Mutation<VirusT>, Double> getScoredIndividualMutsForDrug (Drug<VirusT> drug) {
		DrugClass<VirusT> drugClass = drug.getDrugClass();
		return drugClassDrugMutScores
			.getOrDefault(drugClass, Collections.emptyMap())
			.getOrDefault(drug, Collections.emptyMap());
	}

	public Map<MutationSet<VirusT>, Double> getScoredComboMutsForDrug (Drug<VirusT> drug) {
		DrugClass<VirusT> drugClass = drug.getDrugClass();
		return drugClassDrugComboMutScores
			.getOrDefault(drugClass, Collections.emptyMap())
			.getOrDefault(drug, Collections.emptyMap());
	}

	public boolean drugHasScoredMuts (Drug<VirusT> drug) {
		return drugHasScoredIndividualMuts(drug) || drugHasScoredComboMuts(drug);
	}

	public boolean drugHasScoredIndividualMuts (Drug<VirusT> drug) {
		DrugClass<VirusT> drugClass = drug.getDrugClass();
		if (!drugClassHasScoredMuts(drugClass)) {
			return false;
		}
		for (Mutation<VirusT> mut : drugClassMutAllDrugScores.get(drugClass).keySet()) {
			if (!(drugClassMutAllDrugScores.get(drugClass).get(mut).get(drug) == 0)) {
				return true;
			}
		}
		return false;
	}

	public boolean drugHasScoredComboMuts (Drug<VirusT> drug) {
		DrugClass<VirusT> drugClass = drug.getDrugClass();
		if (!drugClassHasScoredComboMuts(drugClass)) {
			return false;
		}
		for (MutationSet<VirusT> muts : drugClassComboMutAllDrugScores.get(drugClass).keySet()) {
			if (!(drugClassComboMutAllDrugScores.get(drugClass).get(muts).get(drug) == 0)) {
				return true;
			}
		}
		return false;
	}


	// Converts drugClassDrugMutScores: DrugClass => Drug => Mutation => score to
	// drugClassMutsDrugScores DrugClass => Mutation => Drug => score
	private void populateDrugClassMutDrugScores() {
		for (DrugClass<VirusT> drugClass : drugClassDrugMutScores.keySet()) {
			for (Drug<VirusT> drug : drugClassDrugMutScores.get(drugClass).keySet()) {
				for (Mutation<VirusT> mut : drugClassDrugMutScores.get(drugClass).get(drug).keySet()) {
					double score = drugClassDrugMutScores.get(drugClass).get(drug).get(mut);
					if (!drugClassMutDrugScores.containsKey(drugClass)) {
						drugClassMutDrugScores.put(drugClass, new HashMap<Mutation<VirusT>, Map<Drug<VirusT>, Double>>());
					}
					if (!drugClassMutDrugScores.get(drugClass).containsKey(mut)) {
						drugClassMutDrugScores.get(drugClass).put(mut, new HashMap<Drug<VirusT>, Double>());
					}
					drugClassMutDrugScores.get(drugClass).get(mut).put(drug, score);
				}
			}
		}
	}

	// Converts drugClassDrugComboMutScores: DrugClass => Drug => Mutation => score to
	// drugClassComboMutsDrugScores DrugClass => Mutation => Drug => score
	private void populateDrugClassDrugComboMutDrugScores() {
		for (DrugClass<VirusT> drugClass : drugClassDrugComboMutScores.keySet()) {
			for (Drug<VirusT> drug : drugClassDrugComboMutScores.get(drugClass).keySet()) {
				for (MutationSet<VirusT> comboMuts : drugClassDrugComboMutScores.get(drugClass).get(drug).keySet()) {
					double score = drugClassDrugComboMutScores.get(drugClass).get(drug).get(comboMuts);
					if (!drugClassComboMutDrugScores.containsKey(drugClass)) {
						drugClassComboMutDrugScores.put(drugClass, new HashMap<>());
					}
					if (!drugClassComboMutDrugScores.get(drugClass).containsKey(comboMuts)) {
						drugClassComboMutDrugScores.get(drugClass).put(comboMuts, new TreeMap<>());
					}
					drugClassComboMutDrugScores.get(drugClass).get(comboMuts).put(drug, score);
				}
			}
		}
	}

	// Uses drugClassMutDrugScores: DrugClass => Mutation => Drug => score
	// Creates drugClassMutsAllDrugScores: DrugClass => Mutation => Drug => score
	// All drugs are assigned a score for any mutation of that drug's drugClass
	private void populateDrugClassMutAllDrugScores() {
		for (DrugClass<VirusT> drugClass : drugClassMutDrugScores.keySet()) {
			for (Mutation<VirusT> mut : drugClassMutDrugScores.get(drugClass).keySet()) {
				if(!drugClassMutAllDrugScores.containsKey(drugClass)) {
					drugClassMutAllDrugScores.put(drugClass, new HashMap<Mutation<VirusT>, Map<Drug<VirusT>, Double>>());
				}
				if (!drugClassMutAllDrugScores.get(drugClass).containsKey(mut)) {
					drugClassMutAllDrugScores.get(drugClass).put(mut, new HashMap<Drug<VirusT>, Double>());
				}

				for (Drug<VirusT> drug : drugClass.getDrugs()) {
					if (drugClassMutDrugScores.get(drugClass).get(mut).containsKey(drug)) {
						double score = drugClassMutDrugScores.get(drugClass).get(mut).get(drug);
						drugClassMutAllDrugScores.get(drugClass).get(mut).put(drug, score);
					} else {
						drugClassMutAllDrugScores.get(drugClass).get(mut).put(drug, 0.0);
					}
				}
			}
		}
	}

	// Uses drugClassComboMutDrugScores: DrugClass => List<Mutation> => Drug => score
	// Creates drugClassComboMutAllDrugScores: DrugClass => List<Mutation> => Drug => score
	// All drugs are assigned a score for any mutation of that drug's drugClass
	private void populateDrugClassComboMutAllDrugScores() {
		for (DrugClass<VirusT> drugClass : drugClassComboMutDrugScores.keySet()) {
			for (MutationSet<VirusT> comboMut : drugClassComboMutDrugScores.get(drugClass).keySet()) {
				if(!drugClassComboMutAllDrugScores.containsKey(drugClass)) {
					drugClassComboMutAllDrugScores.put(drugClass, new HashMap<>());
				}
				if (!drugClassComboMutAllDrugScores.get(drugClass).containsKey(comboMut)) {
					drugClassComboMutAllDrugScores.get(drugClass).put(comboMut, new TreeMap<>());
				}

				for (Drug<VirusT> drug : drugClass.getDrugs()) {
					double score;
					if (drugClassComboMutDrugScores.get(drugClass).get(comboMut).containsKey(drug)) {
						score = drugClassComboMutDrugScores.get(drugClass).get(comboMut).get(drug);
					} else {
						score = 0.0;
					}
					drugClassComboMutAllDrugScores.get(drugClass).get(comboMut).put(drug, score);
				}
			}
		}
	}
}
